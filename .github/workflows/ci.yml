name: CI Pipeline

on:
  push:
    branches:
      - main
    paths:
      - "src/**" # Runs only if changes are made in the "src" directory
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: self-hosted # Runs on your local machine

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Fetches the latest code

      - name: Remove node_modules and package-lock.json
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Running on Windows"
          cmd.exe /c "rmdir /s /q node_modules & del package-lock.json 2>nul"
          else
          echo "Running on Linux/Mac"
          rm -rf node_modules package-lock.json || echo "Files not found"
          fi
        shell: bash

      - name: Install dependencies (Cross-Platform)
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Installing dependencies on Windows"
          npm ci
          else
          echo "Installing dependencies on Linux/Mac"
          npm ci
          fi
        shell: bash

      - name: Check installed modules
        run: ls -l node_modules | grep winston || echo "winston is missing!"

      - name: Set up Docker network
        run: docker network create student_network || true

      - name: Start MongoDB container
        run: docker run -d --network student_network --name mongodb mongo:latest

      - name: Build and test Student CRUD API container
        run: |
          docker build -t student_crud_api .
          docker run --network student_network -e MONGO_URI="mongodb://mongodb:27017/students" -it student_crud_api sh -c "
          npm install --legacy-peer-deps && 
          ls -l node_modules | grep winston || echo 'winston is missing!'; 
          npx jest --runInBand
          "

      - name: Perform code linting
        run: make docker-lint # Runs linter inside the container

      - name: Log in to DockerHub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      - name: Push Docker Image
        run: make docker-push # Pushes the Docker image to DockerHub
